// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: upload.proto

package uploadpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UploadFileApi_UploadFile_FullMethodName   = "/proto.UploadFileApi/UploadFile"
	UploadFileApi_GetFileChunk_FullMethodName = "/proto.UploadFileApi/GetFileChunk"
)

// UploadFileApiClient is the client API for UploadFileApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadFileApiClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error)
	GetFileChunk(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
}

type uploadFileApiClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadFileApiClient(cc grpc.ClientConnInterface) UploadFileApiClient {
	return &uploadFileApiClient{cc}
}

func (c *uploadFileApiClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UploadFileApi_ServiceDesc.Streams[0], UploadFileApi_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadFileApi_UploadFileClient = grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse]

func (c *uploadFileApiClient) GetFileChunk(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UploadFileApi_ServiceDesc.Streams[1], UploadFileApi_GetFileChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadFileApi_GetFileChunkClient = grpc.ServerStreamingClient[FileChunk]

// UploadFileApiServer is the server API for UploadFileApi service.
// All implementations must embed UnimplementedUploadFileApiServer
// for forward compatibility.
type UploadFileApiServer interface {
	UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error
	GetFileChunk(*FileRequest, grpc.ServerStreamingServer[FileChunk]) error
	mustEmbedUnimplementedUploadFileApiServer()
}

// UnimplementedUploadFileApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploadFileApiServer struct{}

func (UnimplementedUploadFileApiServer) UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedUploadFileApiServer) GetFileChunk(*FileRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetFileChunk not implemented")
}
func (UnimplementedUploadFileApiServer) mustEmbedUnimplementedUploadFileApiServer() {}
func (UnimplementedUploadFileApiServer) testEmbeddedByValue()                       {}

// UnsafeUploadFileApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadFileApiServer will
// result in compilation errors.
type UnsafeUploadFileApiServer interface {
	mustEmbedUnimplementedUploadFileApiServer()
}

func RegisterUploadFileApiServer(s grpc.ServiceRegistrar, srv UploadFileApiServer) {
	// If the following call pancis, it indicates UnimplementedUploadFileApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UploadFileApi_ServiceDesc, srv)
}

func _UploadFileApi_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadFileApiServer).UploadFile(&grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadFileApi_UploadFileServer = grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]

func _UploadFileApi_GetFileChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UploadFileApiServer).GetFileChunk(m, &grpc.GenericServerStream[FileRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadFileApi_GetFileChunkServer = grpc.ServerStreamingServer[FileChunk]

// UploadFileApi_ServiceDesc is the grpc.ServiceDesc for UploadFileApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadFileApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UploadFileApi",
	HandlerType: (*UploadFileApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _UploadFileApi_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFileChunk",
			Handler:       _UploadFileApi_GetFileChunk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "upload.proto",
}
